<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/test/"/>
      <url>/posts/test/</url>
      
        <content type="html"><![CDATA[<div class="typora-export-content"><div id="write" class=""><div contenteditable="false" spellcheck="false" class="mathjax-block md-end-block md-math-block md-rawblock" id="mathjax-n0" cid="n0" mdtype="math_block" data-math-tag-before="0" data-math-labels="[]" data-math-tag-after="0"><div class="md-rawblock-container md-math-container" contenteditable="false" tabindex="-1"><mjx-container class="MathJax" jax="SVG" display="true" style="position: relative;"><svg xmlns="http://www.w3.org/2000/svg" width="49.176ex" height="23.148ex" role="img" focusable="false" viewBox="0 -5365.8 21735.7 10231.5" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style="vertical-align: -11.008ex;"><defs><path id="MJX-530-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-530-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-530-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-530-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-530-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-530-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-530-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-530-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-530-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-530-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-530-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path><path id="MJX-530-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-530-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-530-TEX-N-25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,4615.8)"><g data-mml-node="mtd"><g data-mml-node="mi"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1539,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1983.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(2861.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(1333.6,0)"><use data-c="1D454" xlink:href="#MJX-530-TEX-I-1D454"></use></g><g data-mml-node="mo" transform="translate(1810.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2199.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3021.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4022,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(4522,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(4966.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(5844.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,3315.8)"><g data-mml-node="mtd" transform="translate(3250.7,0)"></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(1333.6,0)"><use data-c="210E" xlink:href="#MJX-530-TEX-I-210E"></use></g><g data-mml-node="mo" transform="translate(1909.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2298.6,0)"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(2848.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3237.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4059.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(5060,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(5560,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(6004.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6882.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7271.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,2015.8)"><g data-mml-node="mtd" transform="translate(3250.7,0)"></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1333.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1722.6,0)"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(2272.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2661.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3483.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4484,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(4984,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5428.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6306.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(6917.9,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(7918.1,0)"><use data-c="1D458" xlink:href="#MJX-530-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(8661.3,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(9661.6,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(10161.6,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(10550.6,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(11383.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,715.8)"><g data-mml-node="mtd" transform="translate(3250.7,0)"></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1333.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1722.6,0)"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(2272.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2661.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3483.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4484,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(4984,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5428.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6306.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(6917.9,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(7918.1,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(8307.1,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(9407.3,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(10407.6,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(10907.6,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(11296.6,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(12129.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(12951.8,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(13952,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(14452,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(14841,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(15674,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-1300)"><g data-mml-node="mtd" transform="translate(3250.7,0)"></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mover" transform="translate(277.8,0)"><g data-mml-node="mo"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(67,835.4) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="909.1px" font-family="serif">①</text></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1333.6,0)"></g><g data-mml-node="mo" transform="translate(1333.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(1722.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2111.6,0)"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(2661.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3050.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3872.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4873,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(5373,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5817.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6695.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7306.9,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(8307.1,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(8807.1,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(9196.1,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(10029.1,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(10851.3,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(11851.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(12240.6,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(13340.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(14341,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(14841,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(15230,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(16063,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(16663,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(17052,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(17885,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-3315.8)"><g data-mml-node="mtd" transform="translate(3250.7,0)"></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mover" transform="translate(277.8,0)"><g data-mml-node="mo"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(67,835.4) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="909.1px" font-family="serif">②</text></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1333.6,0)"></g><g data-mml-node="mo" transform="translate(1333.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(1722.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2111.6,0)"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(2661.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3050.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3872.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4873,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(5373,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5817.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6695.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7306.9,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(8307.1,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(8807.1,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(9418.3,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(10418.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(10807.6,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(11907.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(12908,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(13408,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(13797,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(14186,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(15019,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-4615.8)"><g data-mml-node="mtd" transform="translate(3250.7,0)"></g><g data-mml-node="mtd" transform="translate(3250.7,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-530-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1333.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1722.6,0)"><use data-c="1D453" xlink:href="#MJX-530-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(2272.6,0)"><use data-c="28" xlink:href="#MJX-530-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2661.6,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3483.8,0)"><use data-c="2212" xlink:href="#MJX-530-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4484,0)"><use data-c="31" xlink:href="#MJX-530-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(4984,0)"><use data-c="2C" xlink:href="#MJX-530-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5428.7,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6306.7,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(6917.9,0)"><use data-c="2B" xlink:href="#MJX-530-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(7918.1,0)"><use data-c="1D45A" xlink:href="#MJX-530-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(8796.1,0)"><use data-c="29" xlink:href="#MJX-530-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(9185.1,0)"><use data-c="25" xlink:href="#MJX-530-TEX-N-25"></use></g><g data-mml-node="mi" transform="translate(10018.1,0)"><use data-c="1D45B" xlink:href="#MJX-530-TEX-I-1D45B"></use></g></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable displaystyle="true" columnalign="right left" columnspacing="0em" rowspacing="3pt"><mtr><mtd><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo></mtd><mtd><mi></mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mo>=</mo><mi>h</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mo>=</mo><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mo>=</mo><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mover><mo>=</mo><mn>①</mn></mover><mrow data-mjx-texclass="ORD"></mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mover><mo>=</mo><mn>②</mn></mover><mrow data-mjx-texclass="ORD"></mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mo>=</mo><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mtd></mtr></mtable></math></mjx-assistive-mml></mjx-container></div></div><p>&nbsp;</p></div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode929.独特的电子邮件地址</title>
      <link href="/posts/lc929/"/>
      <url>/posts/lc929/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode929-独特的电子邮件地址"><a href="#LeetCode929-独特的电子邮件地址" class="headerlink" title="LeetCode929.独特的电子邮件地址"></a>LeetCode929.独特的电子邮件地址</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题目来自LeetCode上的<a href="https://leetcode.cn/problems/unique-email-addresses/" target="_blank">『929.独特的电子邮件地址』 </a></p><p>每个 <strong>有效电子邮件地址</strong> 都由一个 <strong>本地名</strong> 和一个 <strong>域名</strong> 组成，以 <code>'@'</code> 符号分隔。除小写字母之外，电子邮件地址还可以含有一个或多个 <code>'.'</code> 或 <code>'+'</code> 。</p><p>例如，在 <code>alice@leetcode.com</code>中， <code>alice </code>是 本地名 ，而 <code>leetcode.com</code> 是 域名 。<br>如果在电子邮件地址的 <strong>本地名</strong> 部分中的某些字符之间添加句点（<code>'.'</code>），则发往那里的邮件将会转发到本地名中没有点的同一地址。请注意，此规则 <strong>不适用于域名</strong> 。</p><p>例如，<code>"alice.z@leetcode.com” </code>和 <code>“alicez@leetcode.com”</code> 会转发到同一电子邮件地址。<br>如果在 <strong>本地名</strong> 中添加加号（<code>'+'</code>），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件。同样，此规则 <strong>不适用于域名</strong> 。</p><p>例如<code> m.y+name@email.com</code> 将转发到 <code>my@email.com</code>。<br>可以同时使用这两个规则。</p><p>给你一个字符串数组 <code>emails</code>，我们会向每个 <code>emails[i]</code> 发送一封电子邮件。返回实际收到邮件的不同地址数目。</p><h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><blockquote><p>输入：<code>emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]</code><br>输出：2<br>解释：实际收到邮件的是<code>"testemail@leetcode.com"</code> 和 <code>"testemail@lee.tcode.com"</code>。</p></blockquote><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><ul><li><code>1 &lt;= emails.length &lt;= 100</code></li><li><code>1 &lt;= emails[i].length &lt;= 100</code></li><li><code>emails[i]</code> 由小写英文字母、<code>'+'</code>、<code>'.'</code> 和 <code>'@'</code> 组成</li><li>每个 <code>emails[i]</code> 都包含有且仅有一个 <code>'@'</code> 字符</li><li>所有本地名和域名都不为空</li><li>本地名不会以 <code>'+'</code> 字符作为开头</li></ul><h3 id="题解1-模拟"><a href="#题解1-模拟" class="headerlink" title="题解1 - 模拟"></a>题解1 - 模拟</h3><p>题目已经说明了每个字符串只有一个 <code>@</code>，将字符串按照 <code>@</code> 可以分成两部分，第一部分为本地名，我们需要删除所有 <code>.</code> 和第一个 <code>+</code> 及之后的内容；第二部分为域名，保持不变即可。</p><p><strong>注：</strong> 这里我直接套的字符串分割，但考虑到只有一个 <code>@</code>，所以并不需要这么麻烦。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> delimiters <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>        string<span class="token double-colon punctuation">::</span>size_type lastPos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string<span class="token double-colon punctuation">::</span>size_type pos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">,</span> lastPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>string<span class="token double-colon punctuation">::</span>npos <span class="token operator">!=</span> pos <span class="token operator">||</span> string<span class="token double-colon punctuation">::</span>npos <span class="token operator">!=</span> lastPos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>lastPos<span class="token punctuation">,</span> pos <span class="token operator">-</span> lastPos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastPos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            pos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">,</span> lastPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numUniqueEmails</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> emails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> email <span class="token operator">:</span> emails<span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> token <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string str<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    str <span class="token operator">+=</span> c<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            st<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token char">'@'</span> <span class="token operator">+</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><h3 id="题解2-正则表达式"><a href="#题解2-正则表达式" class="headerlink" title="题解2 - 正则表达式"></a>题解2 - 正则表达式</h3><p>将所有 <code>.</code> 和第一个 <code>+</code> 及之后的内容替换成空字符串。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numUniqueEmails</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> emails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        regex <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token string">"(\\.)(?=.*@)|(\\+.*)(?=@)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> email <span class="token operator">:</span> emails<span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">regex_replace</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>略。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode478.在圆内随机生成点</title>
      <link href="/posts/lc478/"/>
      <url>/posts/lc478/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode478-在圆内随机生成点"><a href="#LeetCode478-在圆内随机生成点" class="headerlink" title="LeetCode478.在圆内随机生成点"></a>LeetCode478.在圆内随机生成点</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题目来自LeetCode上的<a href="https://leetcode.cn/problems/generate-random-point-in-a-circle/" target="_blank">『LeetCode478.在圆内随机生成点』 </a></p><p>给定圆的半径和圆心，实现一个函数，可以在圆中产生均匀随机点。</p><h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><blockquote><p><strong>输入</strong>:<br>[“Solution”,”randPoint”,”randPoint”,”randPoint”]<br>[[1.0, 0.0, 0.0], [], [], []]<br><strong>输出</strong>: [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]<br><strong>解释</strong>:<br>Solution solution = new Solution(1.0, 0.0, 0.0);<br>solution.randPoint ();//返回[-0.02493，-0.38077]<br>solution.randPoint ();//返回[0.82314,0.38945]<br>solution.randPoint ();//返回[0.36572,0.17248]</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果不考虑等概率，直接返回圆心就行（笑</p><p>考虑等概率的话，就需要一番分析啦，本文从两个角度进行讲解。</p><h5 id="角度1-几何概型角度"><a href="#角度1-几何概型角度" class="headerlink" title="角度1 - 几何概型角度"></a>角度1 - 几何概型角度</h5><p>首先考虑一个朴素的几何概型想法：</p><p>在 $[0,r]$ 的线段上随机取值，取到 $[0,\frac{r}{2}]$ 的概率为 $\frac{1}{2}$，现在将这个线段的一端固定，另一端旋转一周，线段扫过的图形为一个以 $r$ 为半径的圆，此时线段 $[0,\frac{r}{2}]$ 扫过的圆面积为整个圆面积的 $\frac{1}{4}$，圆内随机取一个点，这个点落在小圆的概率为 $\frac{1}{4}$。因此，在一维中等概率取一点，旋转成圆之后就不是等概率了。</p><h5 id="角度2-概率论角度"><a href="#角度2-概率论角度" class="headerlink" title="角度2 - 概率论角度"></a>角度2 - 概率论角度</h5><p>下面从概率论角度分析。</p><p>不失一般性，我们以单位圆为例，在单位圆上任取一点，这个点落到某一圆周上的长度与该圆周的周长成正比，从而也就与该圆周的半径成正比，设单位圆的概率密度函数 $f(r)=kr$，因此：</p><p>$$1=P(0\leq r\leq 1)=\int_0^1kr\ dr=\frac{1}{2}k$$</p><p>得 $k=2$，PDF：$f(r)=2r$</p><p>得到PDF后，就可以算出分布函数CDF：</p><p>$$F(r)=\int_0^rf(t)\ dt=r^2$$</p><p>通过上面的分析，想要得到等概率，需要在 $[0,1]$ 内等概率取 $F(r)$ 的值，$r=\sqrt{F(r)}$，然后再对单位圆进行放缩。</p><h5 id="坐标生成"><a href="#坐标生成" class="headerlink" title="坐标生成"></a>坐标生成</h5><p>根据极坐标生成圆心的坐标：<br>$$<br>\left{</p><p>  \begin{aligned}</p><p>  \rho^2&amp;=x^2+y^2 \</p><p>  x&amp;=\rho\cos{\theta}\</p><p>  y&amp;=\rho\sin{\theta}\</p><p>  \end{aligned}</p><p>\right.<br>$$<br>其中，$\theta$ 可在 $[0, 2\pi]$ 中等概率生成。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    mt19937 gen<span class="token punctuation">{</span> random_device<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    uniform_real_distribution<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> dis<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Solution</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">,</span> <span class="token keyword">double</span> x_center<span class="token punctuation">,</span> <span class="token keyword">double</span> y_center<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">r</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">x</span><span class="token punctuation">(</span>x_center<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y_center<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">randPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> theta <span class="token operator">=</span> <span class="token function">dis</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> PI<span class="token punctuation">;</span>        <span class="token keyword">double</span> rho <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">dis</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>x <span class="token operator">+</span> rho <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">+</span> rho <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>不考虑生成随机数的复杂度</p><ul><li><p>时间复杂度：$O(1)$</p></li><li><p>空间复杂度：$O(1)$</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode829.连续整数求和</title>
      <link href="/posts/lc829/"/>
      <url>/posts/lc829/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode829-连续整数求和"><a href="#LeetCode829-连续整数求和" class="headerlink" title="LeetCode829.连续整数求和"></a>LeetCode829.连续整数求和</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题目来自LeetCode上的<a href="https://leetcode.cn/problems/consecutive-numbers-sum/" target="_blank">『829.连续整数求和』 </a></p><p>给定一个正整数 <code>n</code>，返回连续正整数满足所有数字之和为 <code>n</code> 的组数 。</p><h5 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h5><blockquote><p><strong>输入</strong>: n = 5<br><strong>输出</strong>: 2<br><strong>解释</strong>: 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设这组连续的数字的首个数字为 $a$，长度为 $k$，则由等差数列和可知</p><p>$$\frac{(a+a+k-1)k}{2}=n$$</p><p>得 $(2a+k-1)k=2n$，推出 $k\mid 2n$</p><p>再变形可得 $2a=\frac{2n}{k}-k+1$，由 $a\in {x|x\ge 1\wedge x\in N}$ 推出 $2\mid (\frac{2n}{k}-k+1)$</p><p>还能推出 $\frac{2n}{k}-k+1\ge2$，进而得到 $\frac{2n}{k}\ge k+1&gt;k$，即 $k&lt;\sqrt{2n}$</p><p>综上，我们枚举 $k$，检查是否符合上述两个整除关系即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">consecutiveNumbersSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">%</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">/</span> i <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：$O(\sqrt{2n})$</p></li><li><p>空间复杂度：$O(1)$</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode450.删除二叉搜索树中的节点</title>
      <link href="/posts/lc450/"/>
      <url>/posts/lc450/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode450-删除二叉搜索树中的节点"><a href="#LeetCode450-删除二叉搜索树中的节点" class="headerlink" title="LeetCode450.删除二叉搜索树中的节点"></a>LeetCode450.删除二叉搜索树中的节点</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题目来自 LeetCode 上的<a href="https://leetcode.cn/problems/delete-node-in-a-bst/" target="_blank">『450.删除二叉搜索树中的节点』</a></p><p>给定一个二叉搜索树，要求删除指定值对应的结点。</p><h5 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h5><blockquote><p><strong>输入</strong>：root = [5,3,6,2,4,null,7], key = 3<br><strong>输出</strong>：[5,4,6,2,null,null,7]<br><strong>解释</strong>：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。<br>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。<br>另一个正确答案是 [5,2,6,null,4,null,7]。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>经典的二叉搜索树删除节点问题。</p><p><img src="https://shuocloud-db.oss-cn-hangzhou.aliyuncs.com/LeetCode/LC450.png" alt="LC450.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            TreeNode<span class="token operator">*</span> curr <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                curr <span class="token operator">=</span> curr<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            curr<span class="token operator">-&gt;</span>left <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：$O(n)$</p></li><li><p>空间复杂度：$O(1)$</p></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode433.最小基因变化</title>
      <link href="/posts/lc433/"/>
      <url>/posts/lc433/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode433-最小基因变化"><a href="#LeetCode433-最小基因变化" class="headerlink" title="LeetCode433.最小基因变化"></a>LeetCode433.最小基因变化</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题目来自 LeetCode 上的<a href="https://leetcode-cn.com/problems/minimum-genetic-mutation/" target="_blank">『433. 最小基因变化』</a></p><p>一组基因序列由8个字符组成。一次基因变化定义为 <strong>基因序列中的一个字符</strong> 发生变化。<br>设 <code>bank</code> 中为所有合法的基因变化，求基因 <code>start</code> 到 <code>end</code> 需要经历几次基因变化。</p><h5 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h5><blockquote><p>输入：start = “AACCGGTT”, end = “AACCGGTA”, bank = [“AACCGGTA”]</p><p>输出：1</p></blockquote><h5 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h5><blockquote><p>输入：start = “AAAAACCC”, end = “AACCCCCC”, bank = [“AAAACCCC”,”AAACCCCC”,”AACCCCCC”]</p><p>输出：3</p></blockquote><h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><ul><li><code>start.length == 8</code></li><li><code>end.length == 8</code></li><li><code>0 &lt;= bank.length &lt;= 10</code></li><li><code>bank[i].length == 8</code></li><li><code>start</code>、<code>end</code> 和 <code>bank[i]</code> 仅由字符 <code>['A', 'C', 'G', 'T']</code> 组成</li></ul><h3 id="题解—预处理-BFS"><a href="#题解—预处理-BFS" class="headerlink" title="题解—预处理+BFS"></a>题解—预处理+BFS</h3><p>我们用 $0,1,2,…$ 为<code>bank</code> 中的基因编号，以这些编号为顶点建无向图，建图规则如下：</p><ul><li>如果两个基因序列的 <strong>距离</strong> 为1，即两个基因序列只有一个字符不同，那么就在这两个顶点之间加上一条边。</li><li>为了方便搜索，我们将基因序列 <code>start</code> 也加入到 <code>bank</code> 的末尾。</li></ul><p>建图完毕后，问题就转化成求 <code>start</code> 所在点 <code>x</code> 到 <code>end</code> 所在点 <code>y</code> 之间的最小距离，如果两点不连通就返回 <code>-1</code>。<br>无权值图的单源最短路径可以使用 BFS。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> graph<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>dist<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dist<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> bank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> bank<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>bank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bank<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> poll <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>poll <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> graph<span class="token punctuation">[</span>poll<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minMutation</span><span class="token punctuation">(</span>string start<span class="token punctuation">,</span> string end<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> bank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bank<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> bank<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>bank<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                idx <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：设 <code>bank</code> 长度为 $n$，基因序列长度为 $m$，则建图的复杂度为 $O(m\times n^2)$，搜索时，最多搜索 $n$ 个顶点，因此搜索的复杂度为 $n$，综合复杂度为 $O(m\times n^2)$</li><li>空间复杂度 $O(n^2)$</li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环问题</title>
      <link href="/posts/josephus/"/>
      <url>/posts/josephus/</url>
      
        <content type="html"><![CDATA[<h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>$n$ 个人围成一圈，从第一个开始报数，数到第 $m$ 个的人会被杀掉，直到剩下一个人，求解最后存活的是哪一个人。</p><h3 id="抽象描述"><a href="#抽象描述" class="headerlink" title="抽象描述"></a>抽象描述</h3><p>$0,1,2,…,n-1$ 这些数字围成一圈，从第 $0$ 个数字开始，每次删除第 $m$ 个数字，求最后剩下的那个数字。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><blockquote><p><strong>Definition 1: $f(n,m)$</strong></p><p>$f(n,m)$：表示 $n$ 个数字围成一圈，从第 $0$ 个数字开始，每次删除第 $m$ 个数字，最后剩下的那个数字。</p></blockquote><p>$0,1,2,…,n-1$ 这 $n$ 个数字中，被删除的是数字 $(m-1)%n$，令 $k=(m-1)%n$，则第一次删除后剩下的数字为 $0,1,2,…,k-1,k+1,…,n-1$，下一次删除是从 $k+1$ 开始数，于是我们可以把该序列改写为 $k+1,…,n-1,0,1,…,k-1$。</p><blockquote><p><strong>Definition 2: $g(n-1,m)$</strong></p><p>$g(n-1,m)$：表示从 $k+1,…,n-1,0,1,…,k-1$ 这 $n-1$ 个数字中，从 $k+1$ 开始，每次删除第 $m$ 个数字，最后剩下的那个数字。</p></blockquote><p>显然，$f(n,m)=g(n-1,m)$。（因为最后剩下的数字是同一个）</p><blockquote><p><strong>Definition 3: $h(x)$</strong></p><p>$h(x)$：一个从 $f(n-1,m)$ 到 $g(n-1,m)$ 的映射。</p></blockquote><p>下面求解这个 $h(x)$，观察如下映射规则：<br>$0\rightarrow k+1$</p><p>$1\rightarrow k+2$<br>$…$<br>$n-3\rightarrow k-2$<br>$n-2\rightarrow k-1$<br>可得：$h(x)=(x+k+1)%n$，因此有:<br>$$<br>\begin{align*}<br>f(n,m) &amp;= g(n-1,m) \<br>&amp;= h(f(n-1,m)) \<br>&amp;= (f(n-1,m)+k+1)%n \<br>&amp;= (f(n-1,m)+(m-1)%n+1)%n \<br>&amp;\overset{①}={} ((f(n-1,m)+1)%n+(m-1)%n)%n \<br>&amp;\overset{②}={} ((f(n-1,m)+1)+(m-1))%n \<br>&amp;= (f(n-1,m)+m)%n \<br>\end{align*}<br>$$</p><p>其中$①：0\leq f(n-1,m)\leq n-2$，$1\leq f(n-1,m)+1\leq n-1$，因此 $(f(n-1,m)+1)%n= f(n-1,m)+1$</p><p>$②:distributive\ law:(a+b)%p=(a%p+b%p)%p$</p><p>最终我们有递推公式：<br>$$<br>\begin{equation}<br>f(n,m)=\left{<br>\begin{array}{cl}<br>0  &amp;  n = 0 \<br>(f(n-1,m)+m)%n &amp;  n &gt; 1 \<br>\end{array} \right.\nonumber<br>\end{equation}<br>$$</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">josephus</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">josephus</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">josephus</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> dp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp <span class="token operator">=</span> <span class="token punctuation">(</span>dp <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 经典问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典问题 </tag>
            
            <tag> 约瑟夫环 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
